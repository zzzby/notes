class Solution {
public:
    void next(vector<int> &comb, const vector<int> &target) {
        int size = comb.size();
        for(int i = size - 1; i >= 0; i--) {
            if(comb[i] != target[i]) {
                comb[i]++;
                for(int j = i + 1; j < size; j++) {
                    comb[j] = comb[j - 1] + 1;
                }
                break;
            }
        }
    }
    
    bool isRight(vector<int> &comb, int target) {
        int sum = 0;
        for(int i = 0; i < comb.size(); i++) {
            sum += comb[i];
        }
        return sum == target? true: false;
    }
    
    vector<vector<int>> combinationSum3(int k, int n) {
        vector<int> comb;
        vector<int> target;
        vector<vector<int> > ans;
        for(int i = 1; i <= k; i++) {
            comb.push_back(i);
            target.push_back(9 - k + i);
        }
        if(isRight(target, n)) {
            ans.push_back(target);
            return ans;
        }
        while(comb != target) {
            if(isRight(comb, n))
                ans.push_back(comb);
            next(comb, target);
        }
        return ans;
    }
};