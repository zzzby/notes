class Solution {
public:
    简洁优美版代码：
    /*string fractionAddition(string expression) {
        istringstream in(expression);
        int A = 0, B = 1, a, b;
        char _;
        while (in >> a >> _ >> b) {
            A = A * b + a * B;
            B *= b;
            int g = abs(__gcd(A, B));
            A /= g;
            B /= g;
        }
        return to_string(A) + '/' + to_string(B);
    }
    */

    我的代码：
    pair<int, int> parse(const string &s) {
        int index;
        for(index = 0; index < s.size(); index++) {
            if(s[index] == '/')
                break;
        }
        return make_pair(atoi(s.substr(0, index).c_str()), atoi(s.substr(index + 1, s.size() - 1 - index).c_str()));
    }
    
    int LCM(int a, int b) {
        if(a < b) return LCM(b, a);
        for(int i = 1; i <= a; i++) {
            if(b * i % a == 0)
                return b * i;
        }
    }
    
    void reduce(pair<int, int> &ans) {
        if(ans.first == 0) {
            ans.second = 1;
            return;
        }
        int numer = abs(ans.first), domin = ans.second;
        int GCD = numer * domin / (LCM(numer, domin));
        ans.first /= GCD;
        ans.second /= GCD;
        return;
    }
    
    void calculate(pair<int, int> &ans, pair<int, int> &op, bool isAdd) {
        int temp = LCM(ans.second, op.second);
        if(isAdd) {
            ans.first = temp / ans.second * ans.first + temp / op.second * op.first;
        }
        else {
            ans.first = temp / ans.second * ans.first - temp / op.second * op.first;
        }
        ans.second = temp;
        return;
    }
    
    string fractionAddition(string expression) {
        pair<int, int> ans = make_pair(0, 1);
        bool isPositive = true;
        if(isdigit(expression[0])) expression.insert(expression.begin(), '+');
        for(int i = 0; i < expression.size(); i++) {
            if(expression[i] == '-' || expression[i] == '+') {
                if(expression[i] == '-') isPositive = false;
                else isPositive = true;
                string temp = "";
                int j = i + 1;
                for(; expression[j] != '-' && expression[j] != '+' && j < expression.size(); j++) {
                    temp += expression[j];
                }
                pair<int, int> oper = parse(temp);
                calculate(ans, oper, isPositive);
                i = j - 1;
            }
        }
        reduce(ans);
        return to_string(ans.first) + "/" + to_string(ans.second);
    }
};