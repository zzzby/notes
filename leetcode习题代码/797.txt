class Solution {  
public:
    vector<vector<int> > ans;
    int size;
    
    void getTheAns(int node, vector<int> paths, const vector<vector<int> > &graph) {
        paths.push_back(node);
        for(int i = 0; i < graph[node].size(); i++) {
            if(graph[node][i] == size - 1) {
                paths.push_back(size - 1);
                ans.push_back(paths);
                paths.pop_back();
            }
            else {
                getTheAns(graph[node][i], paths, graph);
            }
        }
    }
    
    vector<vector<int>> allPathsSourceTarget(vector<vector<int>>& graph) {
        vector<int> paths;
        size = graph.size();
        
        getTheAns(0, paths, graph);
        
        return ans;
    }
};