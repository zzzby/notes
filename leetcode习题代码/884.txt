class Solution {
public:
//     vector<string> split(const string& str, const string& delim) {
//         vector<string> res;
//         if("" == str) return res;
//         //先将要切割的字符串从string类型转换为char*类型
//         char * strs = new char[str.length() + 1] ; //不要忘了
//         strcpy(strs, str.c_str()); 

//         char * d = new char[delim.length() + 1];
//         strcpy(d, delim.c_str());

//         char *p = strtok(strs, d);
//         while(p) {
//             string s = p; //分割得到的字符串转换为string类型
//             res.push_back(s); //存入结果数组
//             p = strtok(NULL, d);
//         }

//         return res;
//     }
    unordered_map<string, int> mapping;
    
    vector<string> uncommonFromSentences(string A, string B) {
        run(A);
        run(B);
        vector<string> ans;
        unordered_map<string, int>::iterator iter;
        for(iter = mapping.begin(); iter != mapping.end(); iter++) {
            if(iter->second == 1) {
                ans.push_back(iter->first);
            }
        }
        return ans;
    }
    
    void run(string A) {
        string a = "";
        for(int i = 0; i < A.size(); i++) {
            if(A[i] != ' ') {
                a += A[i];
            }
            if(A[i] == ' ' || i == A.size() - 1) {
                mapping[a]++;
                a = "";
            }
        }
    }
};